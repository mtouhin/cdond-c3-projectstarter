version: 2.1

# slack updates
orbs: 
  slack: circleci/slack@4.5.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.   
    parameters:
      workflow-id:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7}
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            # Your code here
            aws cloudformation delete-stack --stack-name backEnd-${CIRCLE_WORKFLOW_ID:0:5}
            aws cloudformation delete-stack --stack-name frontEnd-${CIRCLE_WORKFLOW_ID:0:5}
            exit 1

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    #parameters:
      # Add parameter here     
    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS = 1
            if(( $SUCCESS==1 )); 
            then
            #  cd ~/project/backend
            #  npm install
            #  Add revert code here. You can find this in the Getting Started section.
              exit 1
            fi
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            # Your code here
            cd ~/project/frontend
            npm i
            npm run build

      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

      - slack/notify:
          channel: integration
          event: fail
          template: basic_fail_1

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
             # Your code here
             cd ~/project/backend
             npm i
             npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
      
      - slack/notify:
          channel: integration
          event: fail
          template: basic_fail_1

  test-frontend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout

      # Restore from cache
      - restore_cache:
          keys: [frontend-build]
      # Your job code here
      - run:
          name: Back-end install
          command: |
            # Your code here
            cd ~/project/frontend/
            npm i
            npm run test

      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-test
                
  test-backend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout

      # Restore from cache
      - restore_cache:
          keys: [backend-build]
      # Your job code here
      - run:
          name: Back-end test
          command: |
           cd ~/project/backend/test/
           npm i
           npm run test
      - save_cache:
          paths: [backend/node_modules]
          key: backend-test

  scan-frontend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [frontend-build]
      # Your job code here
      - run:
          name: front-end scan
          command: |
           cd ~/project/frontend
           npm i
           npm audit fix --audit-level=critical --force
           npm audit --audit-level=critical

      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-scan

  scan-backend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
         keys: [backend-build]
      # Your job code here
      - run:
          name: Back-end scan
          command: |
           cd ~/project/frontend
           npm i
           npm audit fix --audit-level=critical --force
           npm audit --audit-level=critical
      - save_cache:
          paths: [backend/node_modules]
          key: backend-scan

  deploy-infrastructure:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      - checkout
      # Checkout code from git

      - run:
          name: Install tar and gzip
          command: |
            yum -y install tar gzip

      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --region us-east-1 \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"

              #--tags project=your-tag \
              # --stack-name "your back-end stack name with workflow id" \
              # --parameter-overrides ID="your workflow id"  
              #exit 1
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople-frontend \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}"  \
              --region us-east-1 \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"   

              #--tags project=your-tag \
              # --stack-name "your front-end stack name with workflow id" \
              # --parameter-overrides ID="your workflow id" 
              #exit 1

      - run:
          name: Add back-end ip to ansible inventory
          command: |
            # Your code here
            URLS=$(aws ec2 describe-instances --filters "Name=tag:project,Values=udapeople" --query "Reservations[*].Instances[*].PublicDnsName" --output text) \
            curl -H "Content-Type: text/plain" -H "token: HbfEaJNUXNPZ2MNx4KVzaV" --request PUT --data "$URLS" https://kvdb.io/HbfEaJNUXNPZ2MNx4KVzaV/migration_$\{CIRCLE_WORKFLOW_ID:0:7\}
            #exit 1
    
      - run: 
          name: Print ec2 instance dns name
          command: |
            echo $URLS

      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      # Here's where you will add some code to rollback on failure    

      - slack/notify:
          channel: integration
          event: fail
          template: basic_fail_1

  configure-infrastructure:
    docker:
      # Docker image here that supports Ansible
      - image: python:3.7-alpine3.11
    steps:
      # Checkout code from git
      - checkout
      
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints: ["39:e2:fa:58:79:26:eb:b7:0d:5c:98:ca:a1:5e:e8:a4"]
          
      # attach workspace
      - attach_workspace:
          at: ~/

      - run:
          name: Install dependencies
          command: |
            # Your code here
            apk add --update ansible \
            echo "http://dl-cdn.alpinelinux.org/alpine/edge/testing" >> /etc/apk/repositories \
            apk update \
            apk add -u postgis \
            apk add --no-cache curl jq python3 py3-pip \
            pip install awscli
            #exit 1

      - run:
          name: Inventory file setup
          command: |
            URLS=$(curl -H "token: HbfEaJNUXNPZ2MNx4KVzaV" --request GET https://kvdb.io/HbfEaJNUXNPZ2MNx4KVzaV/migration_$\{CIRCLE_WORKFLOW_ID:0:7}) \
            echo "[web]" >> .circleci/ansible/inventory.txt \
            $URLS >> .circleci/ansible/inventory.txt

      - run:
          name: Configure server
          command: |
            # Your code here

            ansible-playbook -i .circleci/ansible/inventory.txt \
            .circleci/ansible/configure-server.yml \
            --private-key=.circleci/ansible/private-key.pem

            #exit 1
      #- destroy-environment
      # Here's where you will add some code to rollback on failure      

  run-migrations:
    docker:
      # Docker image here that supports NodeJS
      - image: circleci/node:13.8.0
    steps:
      - checkout
      # Checkout code from git
      - run:
          name: Run migrations
          command: |
            # Your code here
            exit 1
      - run:
          name: Send migration results to memstash
          command: |
            # Your code here
            exit 1
     # Here's where you will add some code to rollback on failure      

  deploy-frontend:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install dependencies
          command: |
            # your code here
      - run:
          name: Get backend url
          command: |
            # your code here
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
      - run:
          name: Deploy frontend objects
          command: |
            # your code here
      # Here's where you will add some code to rollback on failure     

      - slack/notify:
          channel: integration
          event: fail
          template: basic_fail_1 
                    
  deploy-backend:
    docker:
      # Docker image here that supports Ansible
      - image: python:3.7-alpine3.11
    steps:
      # Checkout code from git
      - checkout

      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints: ["39:e2:fa:58:79:26:eb:b7:0d:5c:98:ca:a1:5e:e8:a4"]
      # attach workspace
      - attach_workspace:
          at: ~/

      - run:
          name: Install dependencies
          command: |
            # your code here
            apk add --update ansible 
      - run:
          name: Deploy backend
          command: |
            # your code here
            ansible-playbook -i inventory.txt deploy-backend.yml
      # Here's where you will add some code to rollback on failure  

      - slack/notify:
          channel: integration
          event: fail
          template: basic_fail_1

  smoke-test:
    docker:
      # Lightweight Docker image 
      - image: python:3.7-alpine3.11
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install dependencies
          command: |
            # your code here
      - run:
          name: Get backend url
          command: |
            # your code here
      - run:
          name: Backend smoke test.
          command: |
            # your code here
      - run:
          name: Frontend smoke test.
          command: |
            # your code here
      # Here's where you will add some code to rollback on failure  

  cloudfront-update:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install dependencies
          command: |
            # your code here
      - run:
          name: Update cloudfront distribution
          command: |
            # your code here
      # Here's where you will add some code to rollback on failure  

cleanup:
    docker:
      # Docker image here
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Get old stack workflow id
          command: |
            # your code here
            export OldWorkflowID="the id here"
            export STACKS=[] #put the list of stacks here
      - run:
          name: Remove old stacks and files
          command: |
            if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
            then
              # your code here
            fi
            
workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [main]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      #- run-migrations:
      #    requires: [configure-infrastructure]
      #- deploy-frontend:
      #    requires: [run-migrations]
      #- deploy-backend:
      #    requires: [run-migrations]
      #- smoke-test:
      #    requires: [deploy-backend, deploy-frontend]
      #- cloudfront-update:
      #    requires: [smoke-test]
      #- cleanup:
      #    requires: [cloudfront-update]