version: 2.1

# slack updates
orbs: 
  slack: circleci/slack@4.5.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.   
    parameters:
      workflow-id:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7}
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            # Your code here
            aws cloudformation delete-stack --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
            aws s3 rb s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --force
            aws cloudformation delete-stack --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}
            #exit 1

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    #parameters:
      # Add parameter here     
    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          when: on_fail
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            export SUCCESS=$(curl --insecure -H "token: HbfEaJNUXNPZ2MNx4KVzaV" --request GET https://kvdb.io/HbfEaJNUXNPZ2MNx4KVzaV/migration_$\{CIRCLE_WORKFLOW_ID:0:7})           
            echo $SUCCESS
            if(( $SUCCESS==1 )); 
            then
              cd ~/project/backend
              npm install
              #  Add revert code here. You can find this in the Getting Started section.
              npm run migrations:revert
              #  exit 1
            fi

  slack-notify:
    steps:          
      - slack/notify:
          channel: integration
          event: fail
          template: basic_fail_1          

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            # Your code here
            cd ~/project/frontend
            npm i
            npm run build

      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
      - slack-notify

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
             # Your code here
             cd ~/project/backend
             npm i
             npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
      - slack-notify

  test-frontend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout

      # Restore from cache
      - restore_cache:
          keys: [frontend-build]
      # Your job code here
      - run:
          name: Back-end install
          command: |
            # Your code here
            cd ~/project/frontend/
            npm i
            npm run test

      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-test
                
  test-backend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout

      # Restore from cache
      - restore_cache:
          keys: [backend-build]
      # Your job code here
      - run:
          name: Back-end test
          command: |
           cd ~/project/backend/test/
           npm i
           npm run test
      - save_cache:
          paths: [backend/node_modules]
          key: backend-test

  scan-frontend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [frontend-build]
      # Your job code here
      - run:
          name: front-end scan
          command: |
           cd ~/project/frontend
           npm i
           npm audit fix --audit-level=critical --force
           npm audit --audit-level=critical

      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-scan

  scan-backend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
         keys: [backend-build]
      # Your job code here
      - run:
          name: Back-end scan
          command: |
           cd ~/project/frontend
           npm i
           npm audit fix --audit-level=critical --force
           npm audit --audit-level=critical
      - save_cache:
          paths: [backend/node_modules]
          key: backend-scan

  deploy-infrastructure:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      - checkout
      # Checkout code from git

      - run:
          name: Install tar and gzip
          command: |
            yum -y install tar gzip

      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --region us-east-1 \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"

      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople-frontend \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}"  \
              --region us-east-1 \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"   

      - run:
          name: Add back-end ip to ansible inventory
          command: |
            # Your code here
            URLS=$(aws ec2 describe-instances --filters "Name=tag:project,Values=udapeople" --query "Reservations[*].Instances[*].PublicDnsName" --output text) ;
            curl -H "Content-Type: text/plain" -H "token: HbfEaJNUXNPZ2MNx4KVzaV" --request PUT --data "$URLS" https://kvdb.io/HbfEaJNUXNPZ2MNx4KVzaV/migration_$\{CIRCLE_WORKFLOW_ID:0:7\} ;
            echo $URLS

      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      # Here's where you will add some code to rollback on failure    
      - slack-notify

  configure-infrastructure:
    docker:
      # Docker image here that supports Ansible
      - image: python:3.7-alpine3.11
    steps:
      # Checkout code from git
      - checkout
      
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints: ["0d:43:54:8d:d8:a3:3b:f6:35:7b:d7:17:46:ef:57:93"]
          
      # attach workspace
      - attach_workspace:
          at: ~/

      - run:
          name: Install dependencies
          command: |
            # Your code here
            apk add --update tar gzip ansible nodejs npm curl python jq
            pip install awscli
            #exit 1
      - run:
          name: Get dns name
          command: |
            URLS=$(aws ec2 describe-instances --filters "Name=tag:project,Values=udapeople" --query "Reservations[*].Instances[*].PublicDnsName" --output text) ;
            curl -H "Content-Type: text/plain" -H "token: HbfEaJNUXNPZ2MNx4KVzaV" --request PUT --data "$URLS" https://kvdb.io/HbfEaJNUXNPZ2MNx4KVzaV/migration_$\{CIRCLE_WORKFLOW_ID:0:7\}

      - run:
          name: Inventory file setup
          command: |
            URLS=$(curl -H "token: HbfEaJNUXNPZ2MNx4KVzaV" --request GET https://kvdb.io/HbfEaJNUXNPZ2MNx4KVzaV/migration_$\{CIRCLE_WORKFLOW_ID:0:7}) ;
            echo -e "[all]\n" >> .circleci/ansible/inventory.txt \
            $URLS >> .circleci/ansible/inventory.txt ;
            cat .circleci/ansible/inventory.txt

      - run:
          name: Configure server
          command: |
            # Your code here
            ansible-playbook -i .circleci/ansible/inventory.txt \
            .circleci/ansible/configure-server.yml --private-key=.circleci/ansible/private-key2.pem

            #exit 1
      
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt

      - destroy-environment 
      - slack-notify
      # Here's where you will add some code to rollback on failure      

  run-migrations:
    docker:
      # Docker image here that supports NodeJS
      - image: circleci/node:13.8.0
    steps:
      - checkout
      # Checkout code from git

      - attach_workspace:
          at: ~/

      - run:
          name: Install awscli
          command: |
            sudo apt-get install -y tar gzip curl jq
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "aws-cli.zip"
            unzip -qq aws-cli.zip
            sudo ./aws/install

      - run:
          name: create .env files
          command: |
            #echo NODE_ENV=production > "backend/.env"
            echo VERSION=1 >> "backend/.env"
            echo ENVIROMENT=development >> "backend/.env"
            echo TYPEORM_CONNECTION=postgres >> "backend/.env"
            echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> "backend/.env"
            echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> "backend/.env"
            echo TYPEORM_ENTITIES=./src/modules/**/*.entity.ts >> "backend/.env"
            echo TYPEORM_HOST=$TYPEORM_HOST >> "backend/.env"
            echo TYPEORM_PORT=$TYPEORM_PORT >> "backend/.env"
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> "backend/.env"
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> "backend/.env"
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> "backend/.env"

      - run:
          name: Run migrations
          command: |
            # Your code here
            cd backend ;
            npm install
            npm run build
            npm run migrations:revert
            npm run migrations >> migration.log
            #exit 1
      - run:
          name: Send migration results to memstash
          command: |
            # Your code here
            cd backend;
            cat migration.log ;
            if grep -q "has been executed successfully" migration.log
            then
              curl --insecure -H "Content-Type: text/plain" -H "token: HbfEaJNUXNPZ2MNx4KVzaV" --request PUT --data "1" https://kvdb.io/HbfEaJNUXNPZ2MNx4KVzaV/migration_$\{CIRCLE_WORKFLOW_ID:0:7\} 
            fi
            #exit 1

     # Here's where you will add some code to rollback on failure      
      - destroy-environment 
      - revert-migrations
      - slack-notify
  
  deploy-frontend:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: 
          name: install tar gzip and curl
          command: |
            yum -y install tar 
            yum -y install gzip
            yum -y install curl
      - run: 
          name: install Dependencies
          command: |
            curl -sL https://rpm.nodesource.com/setup_lts.x | bash -
            yum install -y nodejs      
      - run:  
          name: Get backend API
          command: |
            BACKEND_API=(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicDnsName' \
            --filters  "Name=tag:project,Values=udapeople" --output text) ;
            export API_URL="http://${BACKEND_API}:3030"
            echo "${API_URL}"    
            echo API_URL=$API_URL >> "frontend/.env"
            echo ENVIRONMENT=production  >> "frontend/.env" 
            echo NODE_ENV=production >> "frontend/.env"
            cat "frontend/.env"
      - run:  
          name: configure server
          working_directory: ./frontend         
          command: |
            npm install
            npm install -g typescript ts-node
            npm install package.json
            cat .env
            ls -la
            npm run build
      - run:
          name: List frontend files
          working_directory: ./frontend/dist
          command: |
            ls
      - run:
          name: Deploy frontend object to S3
          working_directory: ./frontend
          command: |
            aws s3 cp ./dist "s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7}" --recursive



  deploy-frontend-:
    docker:
      # Docker image here that supports AWS CLI
      - image: python:3.7-alpine3.11
    steps:
      # Checkout code from git
      - checkout

      # attach workspace
      - attach_workspace:
          at: ~/

      - run:
          name: Install dependencies
          command: |
            # your code here
            apk add --update tar gzip ansible nodejs npm curl jq
            pip install awscli
      - run:
          name: Get backend url
          command: |
            # your code here
            export BACKEND_IP=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters "Name=tag:project,Values=udapeople" | grep -o '[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}')
            #BACKEND_IP=$(aws ec2 describe-instances --filters "Name=tag:project,Values=udapeople" --region us-east-1 --query "Reservations[*].Instances[*].PublicDnsName" --output text) ;
            #BACKEND_IP=$(curl -H "token: HbfEaJNUXNPZ2MNx4KVzaV" --request GET https://kvdb.io/HbfEaJNUXNPZ2MNx4KVzaV/migration_$\{CIRCLE_WORKFLOW_ID:0:7}) ;
            export BACKEND_IP
            export API_URL="http://${BACKEND_IP}:3030"
            echo $API_URL >> frontend/.env 

      #- run:
      #    name: Get backend url
      #    command: |
            # your code here
      #      export BACKEND_PUBLIC_IP=$(aws --region us-east-1 ec2 describe-instances --filters "Name=tag:project,Values=udapeople" --query 'Reservations[*].Instances[*].PublicDnsName' --output text)
      #      export API_URL="http://${BACKEND_PUBLIC_IP}:3030"
      #      echo $API_URL >> frontend/.env
      #      cat frontend/.env


      - run:
          name: Deploy frontend objects
          command: |
            # your code here
            cd frontend
            npm i
            npm install package.json
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
            #aws s3 cp ../.circleci/files/cloudfront.yml s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} 

      - persist_to_workspace:
          root: ~/
          paths:
            - project/frontend/.env

      # Here's where you will add some code to rollback on failure     
      - destroy-environment 
      - revert-migrations
      - slack-notify

  deploy-backend:
    docker:
      # Docker image here that supports Ansible
      - image: python:3.7-alpine3.11
    steps:
      # Checkout code from git
      - checkout

      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints: ["0d:43:54:8d:d8:a3:3b:f6:35:7b:d7:17:46:ef:57:93"]
          
      - attach_workspace:
          at: ~/

      - run:
          name: Install dependencies
          command: |
            # your code here
            apk add --update tar gzip ansible nodejs npm curl python jq
            pip install awscli

      - run:
          name: Zip files
          command: |
            cd backend
            npm install
            cd ../
            tar -C backend -czvf artifact.tar.gz .

      - run:
          name: Get dns name
          command: |
            URLS=$(aws ec2 describe-instances --filters "Name=tag:project,Values=udapeople" --query "Reservations[*].Instances[*].PublicDnsName" --output text) ;
            curl -H "Content-Type: text/plain" -H "token: HbfEaJNUXNPZ2MNx4KVzaV" --request PUT --data "$URLS" https://kvdb.io/HbfEaJNUXNPZ2MNx4KVzaV/migration_$\{CIRCLE_WORKFLOW_ID:0:7\}

      - run:
          name: Inventory file setup
          command: |
            URLS=$(curl -H "token: HbfEaJNUXNPZ2MNx4KVzaV" --request GET https://kvdb.io/HbfEaJNUXNPZ2MNx4KVzaV/migration_$\{CIRCLE_WORKFLOW_ID:0:7}) ;
            echo -e "[all]\n" >> .circleci/ansible/inventory.txt \
            $URLS >> .circleci/ansible/inventory.txt ;
            cat .circleci/ansible/inventory.txt

      - run:
          name: Deploy backend
          command: |
            # your code here
            ansible-playbook -i .circleci/ansible/inventory.txt .circleci/ansible/deploy-backend.yml \
            --private-key=.circleci/ansible/private-key2.pem
  
      # Here's where you will add some code to rollback on failure  
      - destroy-environment 
      - slack-notify
      - revert-migrations

  smoke-test-frontend:
    docker:
      # Lightweight Docker image 
      - image: python:3.7-alpine3.11
    steps:
      # Checkout code from git
      - checkout

      - run:
          name: Install dependencies
          command: |
            # your code here
            apk add --update tar gzip ansible nodejs npm curl python jq
            pip install awscli
      - run:
          name: Frontend smoke test.
          command: |
            # your code here
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"            
            echo ${URL} 
            if curl -s ${URL} | grep "Welcome"
            then
              return 0
            else
              return 1
            fi
      - destroy-environment 
      - slack-notify
      - revert-migrations

  smoke-test-backend:
    docker:
      # Lightweight Docker image 
      - image: python:3.7-alpine3.11
    steps:
      # Checkout code from git
      - checkout
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints: ["0d:43:54:8d:d8:a3:3b:f6:35:7b:d7:17:46:ef:57:93"]

      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            # your code here
            apk add --update tar gzip ansible nodejs npm curl python jq
            pip install awscli
      - run:
          name: Get backend url
          command: |
            # your code here
            export BACKEND_IP=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters "Name=tag:project,Values=udapeople" | grep -o '[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}')
            export API_URL="http://${BACKEND_IP}:3030"
            echo $API_URL
            
      - run:
          name: Backend smoke test.
          command: |
            # your code here
            BACKEND_IP=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters "Name=tag:project,Values=udapeople" | grep -o '[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}')
            API_URL="http://${BACKEND_IP}:3030"
            STATUS_URL="${API_URL}/api/status"
            echo $STATUS_URL
            if curl $STATUS_URL | grep "ok"
            then
              exit 0
            else
              exit 1
            fi

      # Here's where you will add some code to rollback on failure  
      - destroy-environment 
      - slack-notify
      - revert-migrations

  cloudfront-update:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install dependencies
          command: |
            # your code here
            yum -y install curl tar python3 jq
      - run:
          name: Update cloudfront distribution
          command: |
            # your code here
            export OLD_WORKFLOW_ID=$(aws cloudformation \
              list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
              --no-paginate --output text)

            export STACKS=($(aws cloudformation list-stacks --query "StackSummeries[*].StackName" \
            --stack-status-filter CREATE_COMPLETE --no-paginate --output text))

            curl -H "Content-Type: text/plain" -H "token: HbfEaJNUXNPZ2MNx4KVzaV" --request PUT --data "$OLD_WORKFLOW_ID" https://kvdb.io/HbfEaJNUXNPZ2MNx4KVzaV/migration_$\{CIRCLE_WORKFLOW_ID:0:7\}

            aws cloudformation deploy \
              --template-file .circleci/files/cloudfront.yml \
              --tags project=udapeople \
              --stack-name "udapeople-cloudfront" \
              --region us-east-1 \
              --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}"

      # Here's where you will add some code to rollback on failure  
      - destroy-environment 
      - slack-notify
      - revert-migrations

  cleanup:
    docker:
      # Docker image here
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Get old stack workflow id
          command: |
            # your code here
            export OldWorkflowID=${CIRCLE_WORKFLOW_ID:0:7}
            export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
              --stack-status-filter CREATE_COMPLETE --no-paginate --output text)) 
      - run:
          name: Remove old stacks and files
          command: |
            if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
            then
            # your code here
            aws cloudformation delete-stack --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
            aws s3 rm s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
            aws cloudformation delete-stack --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}
            fi
            
workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [main]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test-frontend:
          requires: [deploy-backend, deploy-frontend]
      - smoke-test-backend:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test-frontend, smoke-test-backend]
      #- cleanup:
          #requires: [cloudfront-update]